"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.redactConnectionString = exports.redactValidConnectionString = void 0;
const index_1 = __importStar(require("./index"));
function redactValidConnectionString(inputUrl) {
    const url = inputUrl.clone();
    if (url.username || url.password) {
        url.username = '_credentials_';
        url.password = '';
    }
    if (url.searchParams.has('authMechanismProperties')) {
        const props = new index_1.CommaAndColonSeparatedRecord(url.searchParams.get('authMechanismProperties'));
        if (props.get('AWS_SESSION_TOKEN')) {
            props.set('AWS_SESSION_TOKEN', '_credentials_');
            url.searchParams.set('authMechanismProperties', props.toString());
        }
    }
    if (url.searchParams.has('tlsCertificateKeyFilePassword')) {
        url.searchParams.set('tlsCertificateKeyFilePassword', '_credentials_');
    }
    if (url.searchParams.has('proxyUsername')) {
        url.searchParams.set('proxyUsername', '_credentials_');
    }
    if (url.searchParams.has('proxyPassword')) {
        url.searchParams.set('proxyPassword', '_credentials_');
    }
    return url;
}
exports.redactValidConnectionString = redactValidConnectionString;
function redactConnectionString(uri) {
    let parsed;
    try {
        parsed = new index_1.default(uri);
    }
    catch (_a) { }
    if (parsed) {
        return parsed.redact().toString().replace(/_credentials_/g, '<credentials>');
    }
    const regexes = [
        /(?<=\/\/)(.*)(?=@)/g,
        /(?<=AWS_SESSION_TOKEN(:|%3A))([^,&]+)/gi,
        /(?<=tlsCertificateKeyFilePassword=)([^&]+)/gi,
        /(?<=proxyUsername=)([^&]+)/gi,
        /(?<=proxyPassword=)([^&]+)/gi
    ];
    regexes.forEach(r => {
        uri = uri.replace(r, '<credentials>');
    });
    return uri;
}
exports.redactConnectionString = redactConnectionString;
//# sourceMappingURL=redact.js.map